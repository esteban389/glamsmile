<section class="conocenos-30seg" aria-labelledby="conocenos-title">
	<div class="container">
		<header class="intro">
			<h2 id="conocenos-title">Con√≥cenos en 30 segundos</h2>
			<p>Transformamos sonrisas, cambiamos vidas</p>
		</header>

		<div class="carousel-container">
			<div class="carousel">
				<div class="carousel-track">
					<div class="carousel-slide">
						<video
							src="/assets/conocenos_1.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Transformaci√≥n de sonrisas"
							data-duration="0:31"
						></video>
						<div class="slide-info">
							<h3>Transformaci√≥n Completa</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_2.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Nuestro equipo de especialistas"
							data-duration="0:44"
						></video>
						<div class="slide-info">
							<h3>Nuestro Equipo</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_3.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Tecnolog√≠a dental avanzada"
							data-duration="0:35"
						></video>
						<div class="slide-info">
							<h3>Tecnolog√≠a Avanzada</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_4.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Testimonios de pacientes"
							data-duration="0:28"
						></video>
						<div class="slide-info">
							<h3>Testimonios Reales</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_5.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Proceso de tratamiento"
							data-duration="0:18"
						></video>
						<div class="slide-info">
							<h3>Nuestro Proceso</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_6.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Resultados antes y despu√©s"
							data-duration="0:28"
						></video>
						<div class="slide-info">
							<h3>Resultados Amazing</h3>
						</div>
					</div>
				</div>

				<button class="carousel-btn prev" aria-label="Anterior">‚Äπ</button>
				<button class="carousel-btn next" aria-label="Siguiente">‚Ä∫</button>

				<div class="video-controls">
					<button class="video-control-btn play-pause" aria-label="Reproducir/Pausar">
						<span class="play-icon">‚ñ∂</span>
					</button>
					<button class="video-control-btn mute-unmute" aria-label="Silenciar/Activar sonido">
						<span class="mute-icon">üîá</span>
					</button>
				</div>

				<div class="progress-bar">
					<div class="progress-fill"></div>
				</div>
			</div>
		</div>
	</div>

	<script lang="ts">
		document.addEventListener('DOMContentLoaded', function() {
			const track = document.querySelector('.carousel-track');
			const slides = document.querySelectorAll('.carousel-slide');
			const prevBtn = document.querySelector('.carousel-btn.prev');
			const nextBtn = document.querySelector('.carousel-btn.next');
			const playPauseBtn = document.querySelector('.video-control-btn.play-pause');
			const muteUnmuteBtn = document.querySelector('.video-control-btn.mute-unmute');
			const playIcon = document.querySelector('.play-icon');
			const muteIcon = document.querySelector('.mute-icon');

			let currentSlide = 0;
			const totalSlides = slides.length;
			let autoplayInterval;
			let progressInterval;
			let isPlaying = false;
			let isMuted = true; // Todos los videos empiezan muteados

			// Funci√≥n para manejar videos
			function manageVideos() {
				slides.forEach((slide, index) => {
					const video = slide.querySelector('video');
					if (video) {
						// Sincronizar estado de mute con el estado global
						video.muted = isMuted;

						if (index === currentSlide) {
							// Reproducir video actual solo si est√° en modo play
							if (isPlaying) {
								video.play().then(() => {
									// Iniciar barra de progreso despu√©s de que el video empieza a reproducirse
									startProgress();
								}).catch(e => {
									isPlaying = false;
									if (playIcon) playIcon.textContent = '‚ñ∂';
								});
							} else {
								video.pause();
								stopProgress();
							}

							// Actualizar estado de los botones
							if (playIcon) playIcon.textContent = isPlaying ? '‚è∏' : '‚ñ∂';
							if (muteIcon) muteIcon.textContent = isMuted ? 'üîá' : 'üîä';
						} else {
							// Pausar otros videos y reiniciar
							video.pause();
							video.currentTime = 0;
						}
					}
				});
			}

			// Funci√≥n para toggle play/pause
			function togglePlayPause() {
				isPlaying = !isPlaying;

				if (isPlaying) {
					// Reanudar todos los videos (solo el actual se reproducir√°)
					slides.forEach((slide, index) => {
						const video = slide.querySelector('video');
						if (video) {
							video.muted = isMuted;
						}
					});

					// Reproducir video actual y empezar autoplay
					const currentVideo = slides[currentSlide]?.querySelector('video');
					if (currentVideo) {
						currentVideo.play().then(() => {
							// Iniciar barra de progreso despu√©s de que el video empieza
							startProgress();
						}).catch(e => {
							isPlaying = false;
						});
					}
					startAutoplay();
				} else {
					// Pausar todos los videos y detener autoplay
					slides.forEach((slide) => {
						const video = slide.querySelector('video');
						if (video) {
							video.pause();
						}
					});
					stopProgress();
					stopAutoplay();
				}

				// Actualizar bot√≥n
				if (playIcon) playIcon.textContent = isPlaying ? '‚è∏' : '‚ñ∂';
			}

			// Funci√≥n para toggle mute/unmute
			function toggleMuteUnmute() {
				isMuted = !isMuted;

				// Aplicar estado de mute a todos los videos
				slides.forEach((slide) => {
					const video = slide.querySelector('video');
					if (video) {
						video.muted = isMuted;
					}
				});

				// Actualizar bot√≥n
				if (muteIcon) muteIcon.textContent = isMuted ? 'üîá' : 'üîä';
			}

			// Funci√≥n para iniciar la barra de progreso
			function startProgress() {
				stopProgress();
				resetProgress();

				const duration = getCurrentSlideDuration();
				const startTime = Date.now();


				progressInterval = setInterval(() => {
					const elapsed = Date.now() - startTime;
					const progress = Math.min((elapsed / duration) * 100, 100);

					const progressFill = document.querySelector('.progress-fill');
					if (progressFill) {
						progressFill.style.width = `${progress}%`;
					}

					// Si llegamos al 100%, detener el progreso
					if (progress >= 100) {
						stopProgress();
					}
				}, 50); // Actualizar cada 50ms para animaci√≥n suave
			}

			// Funci√≥n para detener la barra de progreso
			function stopProgress() {
				if (progressInterval) {
					clearInterval(progressInterval);
					progressInterval = null;
				}
			}

			// Funci√≥n para reiniciar la barra de progreso
			function resetProgress() {
				const progressFill = document.querySelector('.progress-fill');
				if (progressFill) {
					progressFill.style.width = '0%';
				}
			}

			// Funci√≥n para ir a un slide espec√≠fico
			function goToSlide(slideIndex) {
				if (slideIndex < 0) slideIndex = totalSlides - 1;
				if (slideIndex >= totalSlides) slideIndex = 0;

				currentSlide = slideIndex;
				track.style.transform = `translateX(-${slideIndex * 100}%)`;

				// Reiniciar la barra de progreso al cambiar de slide
				resetProgress();

				// Manejar videos
				manageVideos();

				// Reiniciar autoplay solo si est√° reproduciendo
				if (isPlaying) {
					const duration = getCurrentSlideDuration();
					startAutoplay();
				}
			}

			// Siguiente slide
			function nextSlide() {
				goToSlide(currentSlide + 1);
			}

			// Anterior slide
			function prevSlide() {
				goToSlide(currentSlide - 1);
			}

			// Funci√≥n para convertir mm:ss a milisegundos
			function parseDuration(durationStr) {
				const [minutes, seconds] = durationStr.split(':').map(Number);
				return (minutes * 60 + seconds) * 1000;
			}

			// Funci√≥n para obtener la duraci√≥n del slide actual
			function getCurrentSlideDuration() {
				const currentSlideElement = slides[currentSlide];
				const video = currentSlideElement?.querySelector('video');
				const duration = video?.getAttribute('data-duration');
				const parsedDuration = duration ? parseDuration(duration) : 5000;
				return parsedDuration;
			}

			// Iniciar autoplay
			function startAutoplay() {
				stopAutoplay();
				const duration = getCurrentSlideDuration();
				autoplayInterval = setInterval(nextSlide, duration);
			}

			// Detener autoplay
			function stopAutoplay() {
				if (autoplayInterval) {
					clearInterval(autoplayInterval);
				}
				stopProgress();
			}

			// Event listeners
			if (prevBtn) {
				prevBtn.addEventListener('click', () => {
					stopAutoplay();
					prevSlide();
				});
			}

			if (nextBtn) {
				nextBtn.addEventListener('click', () => {
					stopAutoplay();
					nextSlide();
				});
			}

			// Event listeners para los botones de video
			if (playPauseBtn) {
				playPauseBtn.addEventListener('click', togglePlayPause);
			}

			if (muteUnmuteBtn) {
				muteUnmuteBtn.addEventListener('click', toggleMuteUnmute);
			}

			// Establecer estados iniciales
			if (playIcon) playIcon.textContent = '‚ñ∂'; // Empezar pausado
			if (muteIcon) muteIcon.textContent = 'üîá'; // Empezar muteado

			// Iniciar carousel
			manageVideos();

			// Intersection Observer para controlar reproducci√≥n autom√°tica
			let userHasInteracted = false; // Para saber si el usuario ya control√≥ manualmente

			const observerOptions = {
				root: null,
				rootMargin: '-10% 0px -10% 0px',
				threshold: 0.5
			};

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						// Usuario llega a la secci√≥n
						if (!userHasInteracted) {
							// Activar reproducci√≥n y sonido solo si el usuario no ha intervenido
							isPlaying = true;
							isMuted = false;

							// Actualizar botones
							if (playIcon) playIcon.textContent = '‚è∏';
							if (muteIcon) muteIcon.textContent = 'üîä';

							// Aplicar cambios y empezar autoplay
							manageVideos();
							startAutoplay();
						}
					} else {
						// Usuario sale de la secci√≥n
						// Pausar y mutear siempre, sin importar si el usuario interactu√≥
						isPlaying = false;
						isMuted = true;

						// Actualizar botones
						if (playIcon) playIcon.textContent = '‚ñ∂';
						if (muteIcon) muteIcon.textContent = 'üîá';

						// Aplicar cambios y detener autoplay
						manageVideos();
						stopAutoplay();
					}
				});
			}, observerOptions);

			// Observar la secci√≥n completa
			const section = document.querySelector('.conocenos-30seg');
			if (section) {
				observer.observe(section);
			}

			// Marcar que el usuario ha interactuado cuando usa los controles
			if (playPauseBtn) {
				playPauseBtn.addEventListener('click', () => {
					userHasInteracted = true;
				});
			}

			if (muteUnmuteBtn) {
				muteUnmuteBtn.addEventListener('click', () => {
					userHasInteracted = true;
				});
			}
		});
	</script>
</section>

<style>
	.conocenos-30seg {
		position: relative;
		background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #fff5f0 100%);
		color: #2d3748;
		padding: clamp(48px, 8vw, 120px) 0;
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 clamp(16px, 3vw, 24px);
	}

	.intro {
		text-align: center;
		max-width: 600px;
		margin: 0 auto clamp(40px, 6vw, 56px);
	}

	.intro h2 {
		margin: 0 0 12px;
		font-size: clamp(32px, 5vw, 42px);
		font-weight: 700;
		background: linear-gradient(135deg, #2d3748, #4a5568);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.intro p {
		margin: 0;
		font-size: clamp(16px, 1.2vw, 18px);
		line-height: 1.5;
		color: #718096;
		font-weight: 500;
	}

	.carousel-container {
		max-width: 900px;
		margin: 0 auto;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: clamp(calc(80vh - 100px), 50vw, 720px);
	}

	.carousel {
		position: relative;
		overflow: hidden;
		border-radius: 20px;
		background: #000;
		aspect-ratio: 16/9;
		box-shadow: 0 12px 40px rgba(0,0,0,0.15);
		height: 100%;
	}

	.carousel-track {
		display: flex;
		transition: transform 0.4s ease-in-out;
		height: 100%;
	}

	.carousel-slide {
		flex: 0 0 100%;
		position: relative;
		height: 100%;
	}

	.carousel-slide video {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.slide-info {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		padding: 20px;
		background: linear-gradient(to top,
			rgba(0,0,0,0.95) 0%,
			rgba(0,0,0,0.85) 30%,
			rgba(0,0,0,0.6) 60%,
			rgba(0,0,0,0.3) 80%,
			transparent 100%
		);
		color: white;
		z-index: 3;
		text-shadow: 0 1px 2px rgba(0,0,0,0.8);
	}

	.slide-info h3 {
		margin: 0;
		font-size: clamp(16px, 1.5vw, 20px);
		font-weight: 600;
		text-shadow: 0 2px 4px rgba(0,0,0,0.9);
	}

	.carousel-btn {
		position: absolute;
		top: 50%;
		transform: translateY(-50%);
		width: 44px;
		height: 44px;
		border-radius: 50%;
		border: 2px solid rgba(255,255,255,0.8);
		background: rgba(0,0,0,0.8);
		color: white;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.3s ease;
		font-size: 24px;
		z-index: 10;
		box-shadow: 0 4px 12px rgba(0,0,0,0.4);
	}

	.carousel-btn:hover {
		background: rgba(0,0,0,0.95);
		border-color: white;
		transform: translateY(-50%) scale(1.1);
		box-shadow: 0 6px 16px rgba(0,0,0,0.6);
	}

	.carousel-btn.prev {
		left: 20px;
	}

	.carousel-btn.next {
		right: 20px;
	}

	.video-controls {
		position: absolute;
		bottom: 20px;
		left: 50%;
		transform: translateX(-50%);
		display: flex;
		gap: 12px;
		z-index: 10;
	}

	.video-control-btn {
		width: 48px;
		height: 48px;
		border-radius: 50%;
		border: 2px solid rgba(255,255,255,0.8);
		background: rgba(0,0,0,0.8);
		color: white;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.3s ease;
		font-size: 18px;
		backdrop-filter: blur(8px);
		box-shadow: 0 4px 12px rgba(0,0,0,0.4);
	}

	.video-control-btn:hover {
		background: rgba(0,0,0,0.95);
		border-color: white;
		transform: scale(1.1);
		box-shadow: 0 6px 16px rgba(0,0,0,0.6);
	}

	.progress-bar {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		height: 3px;
		background: rgba(255,255,255,0.2);
		z-index: 10;
		overflow: hidden;
	}

	.progress-fill {
		height: 100%;
		width: 0%;
		background: linear-gradient(90deg, #f3c98b, #e6b574);
		transition: width 0.1s linear;
		box-shadow: 0 0 10px rgba(243,201,139,0.5);
	}

	/* Responsive Design */
	@media (max-width: 768px) {
		.conocenos-30seg {
			padding: clamp(32px, 6vw, 64px) 0;
		}

		.carousel {
			aspect-ratio: 9/16;
			max-width: 400px;
		}

		.intro h2 {
			font-size: clamp(28px, 6vw, 36px);
		}

		.carousel-btn {
			width: 40px;
			height: 40px;
			font-size: 20px;
		}

		.carousel-btn.prev {
			left: 10px;
		}

		.carousel-btn.next {
			right: 10px;
		}

		.video-control-btn {
			width: 44px;
			height: 44px;
			font-size: 16px;
		}
	}

	@media (max-width: 480px) {
		.carousel {
			max-width: 320px;
			aspect-ratio: 9/19.5;
		}

		.slide-info h3 {
			font-size: 16px;
		}
	}
</style>