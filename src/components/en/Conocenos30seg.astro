<section class="conocenos-30seg" aria-labelledby="conocenos-title">
	<div class="container">
		<header class="intro">
			<h2 id="conocenos-title">Get to know us in 30 seconds</h2>
			<p>We transform smiles, we change lives</p>
		</header>

		<div class="carousel-container">
			<div class="carousel">
				<div class="carousel-track">
					<div class="carousel-slide">
						<video
							src="/assets/conocenos_1.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Smile transformations"
							data-duration="0:31"
						></video>
						<div class="slide-info">
							<h3>Complete Transformation</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_2.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Our team of specialists"
							data-duration="0:44"
						></video>
						<div class="slide-info">
							<h3>Our Team</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_3.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Advanced dental technology"
							data-duration="0:35"
						></video>
						<div class="slide-info">
							<h3>Advanced Technology</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_4.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Patient testimonials"
							data-duration="0:28"
						></video>
						<div class="slide-info">
							<h3>Real Testimonials</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_5.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Treatment process"
							data-duration="0:18"
						></video>
						<div class="slide-info">
							<h3>Our Process</h3>
						</div>
					</div>

					<div class="carousel-slide">
						<video
							src="/assets/conocenos_6.mp4"
							muted
							playsinline
							preload="metadata"
							aria-label="Video: Before and after results"
							data-duration="0:28"
						></video>
						<div class="slide-info">
							<h3>Amazing Results</h3>
						</div>
					</div>
				</div>

				<button class="carousel-btn prev" aria-label="Previous">‹</button>
				<button class="carousel-btn next" aria-label="Next">›</button>

				<div class="video-controls">
					<button class="video-control-btn play-pause" aria-label="Play/Pause">
						<span class="play-icon">▶</span>
					</button>
					<button class="video-control-btn mute-unmute" aria-label="Mute/Unmute">
						<span class="mute-icon">🔇</span>
					</button>
				</div>

				<div class="progress-bar">
					<div class="progress-fill"></div>
				</div>

				<!-- Close button for expanded mode -->
				<button class="close-btn" aria-label="Close" style="display: none;">
					<span>✕</span>
				</button>
			</div>
		</div>
	</div>

	<script lang="ts">
		document.addEventListener('DOMContentLoaded', function() {
			const track = document.querySelector('.carousel-track');
			const slides = document.querySelectorAll('.carousel-slide');
			const prevBtn = document.querySelector('.carousel-btn.prev');
			const nextBtn = document.querySelector('.carousel-btn.next');
			const playPauseBtn = document.querySelector('.video-control-btn.play-pause');
			const muteUnmuteBtn = document.querySelector('.video-control-btn.mute-unmute');
			const playIcon = document.querySelector('.play-icon');
			const muteIcon = document.querySelector('.mute-icon');

			let currentSlide = 0;
			const totalSlides = slides.length;
			let autoplayInterval;
			let progressInterval;
			let isPlaying = false;
			let isMuted = true; // All videos start muted
			let isExpanded = false; // State for expanded mode

			// Function to manage videos
			function manageVideos() {
				slides.forEach((slide, index) => {
					const video = slide.querySelector('video');
					if (video) {
						// Sync mute state with global state
						video.muted = isMuted;

						if (index === currentSlide) {
							// Play current video only if in play mode
							if (isPlaying) {
								video.play().then(() => {
									// Start progress bar after video starts playing
									startProgress();
								}).catch(e => {
									isPlaying = false;
									if (playIcon) playIcon.textContent = '▶';
								});
							} else {
								video.pause();
								stopProgress();
							}

							// Update button states
							if (playIcon) playIcon.textContent = isPlaying ? '⏸' : '▶';
							if (muteIcon) muteIcon.textContent = isMuted ? '🔇' : '🔊';
						} else {
							// Pause other videos and reset
							video.pause();
							video.currentTime = 0;
						}
					}
				});
			}

			// Function to toggle play/pause
			function togglePlayPause() {
				isPlaying = !isPlaying;

				if (isPlaying) {
					// Resume all videos (only current will play)
					slides.forEach((slide, index) => {
						const video = slide.querySelector('video');
						if (video) {
							video.muted = isMuted;
						}
					});

					// Play current video and start autoplay
					const currentVideo = slides[currentSlide]?.querySelector('video');
					if (currentVideo) {
						currentVideo.play().then(() => {
							// Start progress bar after video starts
							startProgress();
						}).catch(e => {
							isPlaying = false;
						});
					}
					startAutoplay();
				} else {
					// Pause all videos and stop autoplay
					slides.forEach((slide) => {
						const video = slide.querySelector('video');
						if (video) {
							video.pause();
						}
					});
					stopProgress();
					stopAutoplay();
				}

				// Update button
				if (playIcon) playIcon.textContent = isPlaying ? '⏸' : '▶';
			}

			// Function to toggle mute/unmute
			function toggleMuteUnmute() {
				isMuted = !isMuted;

				// Apply mute state to all videos
				slides.forEach((slide) => {
					const video = slide.querySelector('video');
					if (video) {
						video.muted = isMuted;
					}
				});

				// Update button
				if (muteIcon) muteIcon.textContent = isMuted ? '🔇' : '🔊';
			}

			// Function to start progress bar
			function startProgress() {
				stopProgress();
				resetProgress();

				const duration = getCurrentSlideDuration();
				const startTime = Date.now();


				progressInterval = setInterval(() => {
					const elapsed = Date.now() - startTime;
					const progress = Math.min((elapsed / duration) * 100, 100);

					const progressFill = document.querySelector('.progress-fill');
					if (progressFill) {
						progressFill.style.width = `${progress}%`;
					}

					// If we reach 100%, stop progress
					if (progress >= 100) {
						stopProgress();
					}
				}, 50); // Update every 50ms for smooth animation
			}

			// Function to stop progress bar
			function stopProgress() {
				if (progressInterval) {
					clearInterval(progressInterval);
					progressInterval = null;
				}
			}

			// Function to reset progress bar
			function resetProgress() {
				const progressFill = document.querySelector('.progress-fill');
				if (progressFill) {
					progressFill.style.width = '0%';
				}
			}

			// Function to expand/collapse video (desktop only)
			function toggleExpand() {
				// Only allow on desktop (not mobile)
				if (window.innerWidth < 768) return;

				isExpanded = !isExpanded;
				const carousel = document.querySelector('.carousel');
				const carouselContainer = document.querySelector('.carousel-container');

				if (isExpanded) {
					// Expanded mode
					carousel.classList.add('expanded');
					carouselContainer.classList.add('expanded');

					// Pause autoplay when expanded
					stopAutoplay();

					// Activate playback and audio when expanding
					isPlaying = true;
					isMuted = false;

					// Update buttons
					if (playIcon) playIcon.textContent = '⏸';
					if (muteIcon) muteIcon.textContent = '🔊';

					// Apply changes to all videos
					slides.forEach((slide) => {
						const video = slide.querySelector('video');
						if (video) {
							video.muted = isMuted;
						}
					});

					// Play current video
					const currentVideo = slides[currentSlide]?.querySelector('video');
					if (currentVideo) {
						currentVideo.play().then(() => {
							// Start progress bar
							startProgress();
						}).catch(() => {
							// Silence autoplay error
						});
					}
				} else {
					// Normal mode - return to previous state
					carousel.classList.remove('expanded');
					carouselContainer.classList.remove('expanded');

					// Keep playback but resume autoplay
					if (isPlaying) {
						startAutoplay();
					}
				}
			}

			// Function to go to specific slide
			function goToSlide(slideIndex) {
				if (slideIndex < 0) slideIndex = totalSlides - 1;
				if (slideIndex >= totalSlides) slideIndex = 0;

				currentSlide = slideIndex;
				track.style.transform = `translateX(-${slideIndex * 100}%)`;

				// Reset progress bar when changing slides
				resetProgress();

				// Manage videos
				manageVideos();

				// Restart autoplay only if playing
				if (isPlaying) {
					const duration = getCurrentSlideDuration();
					startAutoplay();
				}
			}

			// Next slide
			function nextSlide() {
				goToSlide(currentSlide + 1);
			}

			// Previous slide
			function prevSlide() {
				goToSlide(currentSlide - 1);
			}

			// Function to convert mm:ss to milliseconds
			function parseDuration(durationStr) {
				const [minutes, seconds] = durationStr.split(':').map(Number);
				return (minutes * 60 + seconds) * 1000;
			}

			// Function to get current slide duration
			function getCurrentSlideDuration() {
				const currentSlideElement = slides[currentSlide];
				const video = currentSlideElement?.querySelector('video');
				const duration = video?.getAttribute('data-duration');
				const parsedDuration = duration ? parseDuration(duration) : 5000;
				return parsedDuration;
			}

			// Start autoplay
			function startAutoplay() {
				stopAutoplay();
				const duration = getCurrentSlideDuration();
				autoplayInterval = setInterval(nextSlide, duration);
			}

			// Stop autoplay
			function stopAutoplay() {
				if (autoplayInterval) {
					clearInterval(autoplayInterval);
				}
				stopProgress();
			}

			// Event listeners
			if (prevBtn) {
				prevBtn.addEventListener('click', () => {
					stopAutoplay();
					prevSlide();
				});
			}

			if (nextBtn) {
				nextBtn.addEventListener('click', () => {
					stopAutoplay();
					nextSlide();
				});
			}

			// Event listeners for video buttons
			if (playPauseBtn) {
				playPauseBtn.addEventListener('click', togglePlayPause);
			}

			if (muteUnmuteBtn) {
				muteUnmuteBtn.addEventListener('click', toggleMuteUnmute);
			}

			// Event listener for carousel click (expand on desktop)
			const carousel = document.querySelector('.carousel');
			if (carousel) {
				carousel.addEventListener('click', (e) => {
					// Don't expand if clicking on control buttons
					if (e.target.closest('.carousel-btn') ||
						e.target.closest('.video-controls') ||
						e.target.closest('.progress-bar')) {
						return;
					}

					// Only expand on desktop
					if (window.innerWidth >= 768) {
						toggleExpand();
					}
				});
			}

			// Close with ESC key when expanded
			document.addEventListener('keydown', (e) => {
				if (e.key === 'Escape' && isExpanded) {
					toggleExpand();
				}
			});

			// Event listener for close button
			const closeBtn = document.querySelector('.close-btn');
			if (closeBtn) {
				closeBtn.addEventListener('click', (e) => {
					e.stopPropagation();
					toggleExpand();
				});
			}

			// Set initial states
			if (playIcon) playIcon.textContent = '▶'; // Start paused
			if (muteIcon) muteIcon.textContent = '🔇'; // Start muted

			// Initialize carousel
			manageVideos();

			// Intersection Observer to control automatic playback
			let userHasInteracted = false; // To know if user has manually controlled

			const observerOptions = {
				root: null,
				rootMargin: '-10% 0px -10% 0px',
				threshold: 0.5
			};

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						// User arrives at section
						if (!userHasInteracted) {
							// Activate playback and sound only if user hasn't intervened
							isPlaying = true;
							isMuted = false;

							// Update buttons
							if (playIcon) playIcon.textContent = '⏸';
							if (muteIcon) muteIcon.textContent = '🔊';

							// Apply changes and start autoplay
							manageVideos();
							startAutoplay();
						}
					} else {
						// User leaves section
						// Pause and mute always, regardless of user interaction
						isPlaying = false;
						isMuted = true;

						// Update buttons
						if (playIcon) playIcon.textContent = '▶';
						if (muteIcon) muteIcon.textContent = '🔇';

						// Apply changes and stop autoplay
						manageVideos();
						stopAutoplay();
					}
				});
			}, observerOptions);

			// Observe the complete section
			const section = document.querySelector('.conocenos-30seg');
			if (section) {
				observer.observe(section);
			}

			// Mark that user has interacted when using controls
			if (playPauseBtn) {
				playPauseBtn.addEventListener('click', () => {
					userHasInteracted = true;
				});
			}

			if (muteUnmuteBtn) {
				muteUnmuteBtn.addEventListener('click', () => {
					userHasInteracted = true;
				});
			}
		});
	</script>
</section>

<style>
	.conocenos-30seg {
		position: relative;
		background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #fff5f0 100%);
		color: #2d3748;
		padding: clamp(48px, 8vw, 120px) 0;
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 clamp(16px, 3vw, 24px);
	}

	.intro {
		text-align: center;
		max-width: 600px;
		margin: 0 auto clamp(40px, 6vw, 56px);
	}

	.intro h2 {
		margin: 0 0 12px;
		font-size: clamp(32px, 5vw, 42px);
		font-weight: 700;
		background: linear-gradient(135deg, #2d3748, #4a5568);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.intro p {
		margin: 0;
		font-size: clamp(16px, 1.2vw, 18px);
		line-height: 1.5;
		color: #718096;
		font-weight: 500;
	}

	.carousel-container {
		max-width: 900px;
		margin: 0 auto;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: clamp(calc(80vh - 100px), 50vw, 720px);
	}

	.carousel {
		position: relative;
		overflow: hidden;
		border-radius: 20px;
		background: #000;
		aspect-ratio: 16/9;
		box-shadow: 0 12px 40px rgba(0,0,0,0.15);
		height: 100%;
	}

	.carousel-track {
		display: flex;
		transition: transform 0.4s ease-in-out;
		height: 100%;
	}

	.carousel-slide {
		flex: 0 0 100%;
		position: relative;
		height: 100%;
	}

	.carousel-slide video {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.slide-info {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		padding: 20px;
		background: linear-gradient(to top,
			rgba(0,0,0,0.95) 0%,
			rgba(0,0,0,0.85) 30%,
			rgba(0,0,0,0.6) 60%,
			rgba(0,0,0,0.3) 80%,
			transparent 100%
		);
		color: white;
		z-index: 3;
		text-shadow: 0 1px 2px rgba(0,0,0,0.8);
	}

	.slide-info h3 {
		margin: 0;
		font-size: clamp(16px, 1.5vw, 20px);
		font-weight: 600;
		text-shadow: 0 2px 4px rgba(0,0,0,0.9);
	}

	.carousel-btn {
		position: absolute;
		top: 50%;
		transform: translateY(-50%);
		width: 44px;
		height: 44px;
		border-radius: 50%;
		border: 2px solid rgba(255,255,255,0.8);
		background: rgba(0,0,0,0.8);
		color: white;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.3s ease;
		font-size: 24px;
		z-index: 10;
		box-shadow: 0 4px 12px rgba(0,0,0,0.4);
	}

	.carousel-btn:hover {
		background: rgba(0,0,0,0.95);
		border-color: white;
		transform: translateY(-50%) scale(1.1);
		box-shadow: 0 6px 16px rgba(0,0,0,0.6);
	}

	.carousel-btn.prev {
		left: 20px;
	}

	.carousel-btn.next {
		right: 20px;
	}

	.video-controls {
		position: absolute;
		bottom: 20px;
		left: 50%;
		transform: translateX(-50%);
		display: flex;
		gap: 12px;
		z-index: 10;
	}

	.video-control-btn {
		width: 48px;
		height: 48px;
		border-radius: 50%;
		border: 2px solid rgba(255,255,255,0.8);
		background: rgba(0,0,0,0.8);
		color: white;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.3s ease;
		font-size: 18px;
		backdrop-filter: blur(8px);
		box-shadow: 0 4px 12px rgba(0,0,0,0.4);
	}

	.video-control-btn:hover {
		background: rgba(0,0,0,0.95);
		border-color: white;
		transform: scale(1.1);
		box-shadow: 0 6px 16px rgba(0,0,0,0.6);
	}

	.progress-bar {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		height: 3px;
		background: rgba(255,255,255,0.2);
		z-index: 10;
		overflow: hidden;
	}

	.progress-fill {
		height: 100%;
		width: 0%;
		background: linear-gradient(90deg, #f3c98b, #e6b574);
		transition: width 0.1s linear;
		box-shadow: 0 0 10px rgba(243,201,139,0.5);
	}

	/* Close button for expanded mode */
	.close-btn {
		position: absolute;
		top: 20px;
		right: 20px;
		width: 44px;
		height: 44px;
		border-radius: 50%;
		border: 2px solid rgba(255,255,255,0.8);
		background: rgba(0,0,0,0.8);
		color: white;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.3s ease;
		font-size: 20px;
		z-index: 20;
		opacity: 0;
		pointer-events: none;
	}

	.carousel.expanded .close-btn {
		opacity: 1;
		pointer-events: auto;
	}

	.close-btn:hover {
		background: rgba(0,0,0,0.95);
		border-color: white;
		transform: scale(1.1);
		box-shadow: 0 6px 16px rgba(0,0,0,0.6);
	}

	/* Expanded mode (desktop only) */
	.carousel-container.expanded {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		z-index: 1000;
		height: 100vh;
		width: 100vw;
		max-width: none;
		background: rgba(0,0,0,0.95);
		backdrop-filter: blur(10px);
	}

	.carousel.expanded {
		height: 90vh;
		max-height: 90vh;
		width: 90vw;
		max-width: 90vw;
		margin: 5vh auto;
		border-radius: 20px;
		box-shadow: 0 25px 80px rgba(0,0,0,0.5);
		cursor: default;
	}

	.carousel.expanded .carousel-slide video {
		border-radius: 20px;
		object-fit: contain;
	}

	/* Smooth transition animation */
	.carousel-container {
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
	}

	.carousel {
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Responsive Design */
	@media (max-width: 768px) {
		.conocenos-30seg {
			padding: clamp(32px, 6vw, 64px) 0;
		}

		/* Disable expanded mode on mobile */
		.carousel-container {
			pointer-events: none;
		}

		.carousel {
			pointer-events: auto;
		}

		.carousel .close-btn {
			display: none !important;
		}
	}

		.carousel {
			aspect-ratio: 9/16;
			max-width: 400px;
		}

		.intro h2 {
			font-size: clamp(28px, 6vw, 36px);
		}

		.carousel-btn {
			width: 40px;
			height: 40px;
			font-size: 20px;
		}

		.carousel-btn.prev {
			left: 10px;
		}

		.carousel-btn.next {
			right: 10px;
		}

		.video-control-btn {
			width: 44px;
			height: 44px;
			font-size: 16px;
		}
	}

	@media (max-width: 480px) {
		.carousel {
			max-width: 320px;
			aspect-ratio: 9/19.5;
		}

		.slide-info h3 {
			font-size: 16px;
		}
	}
</style>
